{"version":3,"sources":["webpack://bright-website/./src/config/routing.ts","webpack://bright-website/./src/helpers/pathHelpers.ts","webpack://bright-website/./src/models/creator.ts","webpack://bright-website/./src/pages/career/JobsOpenTop.tsx","webpack://bright-website/./src/styles/variables.ts"],"names":["routeLinks","aboutUs","whatWeOffer","projects","career","blog","startProject","privacyPolicy","getJobPath","path","split","pop","replace","getFileNameOnly","deleteTimestampFromUrl","createBlogPosts","data","allMarkdownRemark","edges","map","node","frontmatter","id","slug","fields","excerpt","createProjects","filter","project","published","sort","a","b","order","createJobs","fileAbsolutePath","url","pathOrigin","jobs","useStaticQuery","jobsQuery","JobsContainer","styled","variables","JobItem","JobSalary","JobHours","ApplyBtn","className","job","key","title","href","hours","salary","style","marginRight","src","alt","pxToRem","px","deviceSize","pagePadding","size","mobile","tablet","navHeight","device","desktop","color","primary","text","white","black","font","family"],"mappings":"qJAAO,IAAMA,EAAa,CACxBC,QAAS,YACTC,YAAa,iBACbC,SAAU,YACVC,OAAQ,UACRC,KAAM,QACNC,aAAc,iBACdC,cAAe,oB,mHCPV,IAIMC,EAAa,SAACC,GACzB,OAAOA,EAAKC,MAAM,QAAQC,MAAMC,QAAQ,MAAO,KAGpCC,EAAkB,SAACJ,GAC9B,OAAOA,EAAKC,MAAM,KAAKC,MAAMC,QAAQ,MAAO,KAGjCE,EAAyB,SAACL,GACrC,OAAOA,EAAKG,QAAQ,oCAAqC,M,mHCXpD,IAAMG,EAAkB,SAACC,GAAD,OAC5BA,EAAKC,kBAAkBC,OAAS,IAAIC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,wBACpCA,EAAKC,YAD+B,CAEvCC,GAAIF,EAAKE,GACTC,KAAMH,EAAKI,OAAOD,KAClBE,QAASL,EAAKK,cAILC,EAAiB,SAACV,GAAD,OAC3BA,EAAKC,kBAAkBC,OAAS,IAC9BC,KAAI,qBAAGC,KAAQC,eACfM,QAAO,SAACC,GAAD,OAA2BA,EAAQC,aAC1CC,MAAK,SAACC,EAAiBC,GAAlB,OAAuCD,EAAEE,OAAS,KAAOD,EAAEC,OAAS,QAQjEC,EAAa,SAAClB,GAAD,OACvBA,EAAKC,kBAAkBC,OAAS,IAC9BC,KAAI,oBAAGC,KAAQC,EAAX,EAAWA,YAAac,EAAxB,EAAwBA,iBAAxB,wBAAqHd,EAArH,CAAkIe,IAAKD,S,kHC6DhJ,UA7EuD,SAAC,GAAyB,IAAD,IAAtBE,kBAAsB,MAAT,GAAS,EACxEC,GAAOJ,SAAWK,oBAAeC,IAEjCC,EAAgBC,oBAAH,sEAAGA,CAAH,6EAIRC,mBAOLC,EAAUF,oBAAH,gEAAGA,CAAH,8DAIFC,mBAKLE,EAAYH,oBAAH,kEAAGA,CAAH,2CAKTI,EAAWJ,oBAAH,iEAAGA,CAAH,gDAMRK,EAAWL,kBAAH,iEAAGA,CAAH,sBAId,OACE,gBAACD,EAAD,CAAeO,UAAU,oDACtBV,EAAKnB,KAAI,SAAA8B,GAAG,OACX,gBAACL,EAAD,CAASI,UAAU,aAAaE,IAAKD,EAAIE,OACvC,2BACE,qBAAGC,KAASf,EAAL,SAAuB7B,QAAWyC,EAAIb,MAC3C,sBAAIY,UAAU,uCACXC,EAAIE,OAEP,gBAACL,EAAD,CAAUE,UAAU,uBACjBC,EAAII,OAEP,gBAACR,EAAD,CAAWG,UAAU,oBAClBC,EAAIK,SAGT,gBAACP,EAAD,CAAUK,KAAK,iBAAiBJ,UAAU,8BAA1C,cAMN,uBAAKA,UAAU,aAAaO,MAAO,CAAEC,YAAa,SAChD,2BACE,qBACEJ,KAASpD,WAAL,kBACJgD,UAAU,uCAEV,0BAAQA,UAAU,kBAChB,uBAAKS,IAAI,yBAAyBC,IAAI,aAL1C,eAiBV,IAAMlB,EAAS,c,kCCxFf,IACamB,EAAU,SAACC,GAAD,OAAmBA,EAD3B,GACQ,OAEjBC,EACI,IADJA,EAEI,IAGV,KACEF,UAEAG,YAAaH,EAAQ,IAErBI,KAAM,CACJC,OAAWH,EAAL,KACNI,OAAWJ,EAAL,KACNK,UAAW,UAGbC,OAAQ,CACNH,OAAO,2BAA2BH,EAAmB,GAA/C,MACNO,QAAQ,cAAeP,GAGzBQ,MAAO,CACLC,QAAS,UACTC,KAAM,UACNC,MAAO,UACPC,MAAO,WAGTC,KAAM,CACJvB,MAAO,CACLwB,OAAQ,yBACRZ,KAAMJ,EAAQ,KAEhBY,KAAM,CACJI,OAAQ,mBACRZ,KAAMJ,EAAQ","file":"component---src-pages-career-jobs-open-top-tsx-4e8a0d71ce719f99f9f6.js","sourcesContent":["export const routeLinks = {\n  aboutUs: '/about-us',\n  whatWeOffer: '/what-we-offer',\n  projects: '/projects',\n  career: '/career',\n  blog: '/blog',\n  startProject: '/start-project',\n  privacyPolicy: '/privacy-policy'\n}","export const getUrlForAbsolutePath = (path: string) => {\n  return path.split(\"pages\").pop().replace(\".md\", \"\")\n}\n\nexport const getJobPath = (path: string) => {\n  return path.split('jobs').pop().replace('.md', '')\n}\n\nexport const getFileNameOnly = (path: string) => {\n  return path.split(\"/\").pop().replace(\".md\", \"\")\n}\n\nexport const deleteTimestampFromUrl = (path: string) => {\n  return path.replace(/([0-9]{4})-([0-9]{2})-([0-9]{2})-/, \"\")\n}\n","import { BlogPostModel, ProjectModel, GQLData, AuthorModel, JobModel } from \"./gql\"\n\nexport const createBlogPosts = (data: GQLData): BlogPostModel[] => (\n  (data.allMarkdownRemark.edges || []).map(({ node }) => ({\n    ...node.frontmatter,\n    id: node.id,\n    slug: node.fields.slug,\n    excerpt: node.excerpt\n  } as BlogPostModel))\n)\n\nexport const createProjects = (data: GQLData): ProjectModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter } }: { node: { frontmatter: ProjectModel } }) => frontmatter)\n    .filter((project: ProjectModel) => project.published)\n    .sort((a: ProjectModel, b: ProjectModel) => (a.order || 99) - (b.order || 99))\n)\n\nexport const createAuthors = (data: GQLData): AuthorModel[] => (\n  (data.allMarkdownRemark.nodes || [])\n    .map(({ frontmatter }: { frontmatter: AuthorModel }) => frontmatter)\n)\n\nexport const createJobs = (data: GQLData): JobModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter, fileAbsolutePath } }: { node: { frontmatter: JobModel, fileAbsolutePath: string } }) => ({...frontmatter, url: fileAbsolutePath}))\n)\n","import { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport React from 'react'\n\nimport variables from '../../styles/variables'\nimport { getJobPath } from '../../helpers/pathHelpers'\nimport { routeLinks } from '../../config/routing'\nimport { createJobs } from '../../models/creator'\n\nconst JobsOpenTop: React.FC<{ pathOrigin?: string }> = ({ pathOrigin = '' }) => {\n  const jobs = createJobs(useStaticQuery(jobsQuery))\n\n  const JobsContainer = styled.div`\n    flex-wrap: wrap;\n    justify-content: flex-end;\n    \n    @media ${variables.device.mobile} {\n      && {\n        margin-top: 4rem;\n      }\n    }\n  `\n\n  const JobItem = styled.div`\n    padding: 0 1em;\n    flex-basis: 33%;\n    \n    @media ${variables.device.mobile} {\n      flex-basis: 100%;\n    }\n  `\n\n  const JobSalary = styled.div`\n    word-break: break-all;\n    max-width: 280px;\n  `\n\n  const JobHours = styled.div`\n    &:first-letter {\n      text-transform: capitalize;\n    }\n  `\n\n  const ApplyBtn = styled.a`\n    margin-top: 1rem;\n  `\n\n  return (\n    <JobsContainer className='is-flex is-flex-direction-row open-positions-top'>\n      {jobs.map(job => (\n        <JobItem className='level-item' key={job.title}>\n          <div>\n            <a href={`${pathOrigin}/jobs${getJobPath(job.url)}`}>\n              <h3 className='has-text-white has-text-weight-bold'>\n                {job.title}\n              </h3>\n              <JobHours className='has-text-grey-light'>\n                {job.hours}\n              </JobHours>\n              <JobSalary className='has-text-primary'>\n                {job.salary}\n              </JobSalary>\n            </a>\n            <ApplyBtn href='/apply-for-job' className='button is-primary is-small'>\n              Apply\n            </ApplyBtn>\n          </div>\n        </JobItem>\n      ))}\n      <div className='level-item' style={{ marginRight: '2rem' }}>\n        <div>\n          <a\n            href={`${routeLinks.career}#open-positions`}\n            className='has-text-weight-bold has-text-white'\n          >\n            <figure className='image is-24x24'>\n              <img src='/images/arrow-more.svg' alt='See all' />\n            </figure>\n            See all\n          </a>\n        </div>\n      </div>\n    </JobsContainer>\n  )\n}\n\nexport default JobsOpenTop\n\nconst jobsQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { layout: { eq: \"job\" }, published: { eq: true } }\n      }\n      limit: 3\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            salary\n            hours\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`","const basePx = 16\nexport const pxToRem = (px: number) => `${px / basePx}rem`\n\nconst deviceSize = {\n  mobile: 480,\n  tablet: 768\n}\n\nexport default {\n  pxToRem,\n\n  pagePadding: pxToRem(40),\n\n  size: {\n    mobile: `${deviceSize.mobile}px`,\n    tablet: `${deviceSize.tablet}px`,\n    navHeight: '4.6rem'\n  },\n\n  device: {\n    mobile: `screen and (max-width: ${deviceSize.tablet -1}px)`,\n    desktop: `min-width: ${deviceSize.tablet}`,\n  },\n\n  color: {\n    primary: '#f7931e', //brightOrange\n    text: '#131214',\n    white: '#ffffff',\n    black: '#000000'\n  },\n\n  font: {\n    title: {\n      family: 'Montserrat, sans-serif',\n      size: pxToRem(22)\n    },\n    text: {\n      family: 'Lato, sans-serif',\n      size: pxToRem(18)\n    }\n  },\n}\n"],"sourceRoot":""}