{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/using-file-resources-in-android-unit-test","result":{"data":{"markdownRemark":{"html":"<p>Since version 1.1 of Android Gradle Plugin we can run unit test on a local JVM on our development machine. It's still <a href=\"http://tools.android.com/tech-docs/unit-testing-support\">experimental</a> feature but I've found it's fully usable.<br/>\nFinally Android developers have lighweight build-in tool for unit testing :)<br />\nThe times when we need <a href=\"http://robolectric.org/configuring/\">third party</a> libraries to test unit classes <em>quickly</em> seems to be gone :)<br>\n<br/>\nI had to implement a parser which operates on JSON data returned from REST API. <br/>\nThe first thing I thought was to get some sort of responses from the server and put them in local files.\nThis approach was the simplest way to make my parser work with proper data without any mocking stuff.\nAfter a while I prepared simple test which was ready to read json from the file:</p>\n<pre><code class=\"language-java\"> @Test\npublic void parserShouldHasInvalidStateIfResponseHasMissingField() throws Exception {\n    Parser parser = new Parser();\n    File file = Utils.getFileFromPath(\"res/response_with_missing_field.json\");\n    String json = Utils.readFileAsString(file);\n    parser.parse(json);\n    assertThat(parser.getState(), equalTo(State.INVALID));\n}\n</code></pre>\n<p>Where method <code>getFileFromPath</code> is:</p>\n<pre><code class=\"language-java\">public static File getFileFromPath(Object obj, String fileName) {\n    ClassLoader classLoader = obj.getClass().getClassLoader();\n    URL resource = classLoader.getResource(fileName);\n    return new File(resource.getPath());\n}\n</code></pre>\n<p>Unfortunately if you put <em>response<em>with</em>missing_field.json</em> directly in the sources directory or any other, <code>getResources()</code> returns <code>null</code>. <br/>\nAfter quick research I realized the reason was the apk doesn't contain any resource file at all.\nSo it's going to be problem with build tool which ignores the resource. </p>\n<p>Let's play with <em>gradle</em> a bit to make it work.</p>\n<ol>\n<li>Ensure you're using at least <a href=\"http://tools.android.com/tech-docs/unit-testing-support\">Android Gradle Plugin version 1.1</a>. Follow the link to set up Android Studio correctly. </li>\n<li>\n<p>Create test directory. Put unit test classes in java directory and put your resources file in res directory. Android Studio should mark them like follow: </p>\n<pre><code>![test-directory-structure]({{site.url}}/images/test-directory-structure.png)\n</code></pre>\n</li>\n<li>\n<p>Create <code>gradle</code> task to copy resources into classes directory to make them visible for classloader <code>getResources()</code> method:</p>\n<pre><code class=\"language-groovy\"></code></pre>\n</li>\n</ol>\n<p>android{\n...\n}</p>\n<p>task copyResDirectoryToClasses(type: Copy){\nfrom \"${projectDir}/src/test/res\"\ninto \"${buildDir}/intermediates/classes/test/debug/res\"\n}</p>\n<p>assembleDebug.dependsOn(copyResDirectoryToClasses)</p>\n<pre><code> Run unit test from Android Studio by &#x3C;kbd>Ctrl&#x3C;/kbd>+&#x3C;kbd>Shift&#x3C;/kbd>+&#x3C;kbd>F10&#x3C;/kbd> on whole class or specific test method.&#x3C;br/>\n Now you should be able to get the `File` reference to the resource.\n\n\nSee this post on my [personal blog](http://mklimek.github.io/using-file-resources-in-android-unit-test/).\n</code></pre>","excerpt":"Since version 1.1 of Android Gradle Plugin we can run unit test on a local JVM on our development machine. It's still experimental featureâ€¦","frontmatter":{"slug":null,"title":"Using the file resources in Android POJO unit test","description":null,"author":"mateuszklimek","tags":["android","unit-testing"],"date":"2015-04-12T22:00:00.000Z","image":null},"timeToRead":2,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-13-using-file-resources-in-android-unit-test.md"},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-04-13-using-file-resources-in-android-unit-test.md"}},"staticQueryHashes":["2189233960","3181594896"]}