{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/18","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"847e8e56-d6e5-596f-b81a-aa23e8003453","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-2-1-heartbeat-button.md","excerpt":"Hi! Today I will show you how to create a simple heart button that will simulate a heartbeat upon each tap. You can find an example project on my Github. Create a button First of all we have to create a button. We create a heart image from the resources that you can find in an example project and we assign it to our button. Then we simply position out button inside a view and assign a certain size to it. The size should equal our heart image's size. Next, we add target to our button's…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Heartbeat button","tags":["iOS"],"date":"2016-01-31T23:00:00.000Z"},"fields":{"slug":"/blog/2016-2-1-heartbeat-button"}}},{"node":{"id":"2ce6de0b-1c4c-5f25-877b-7b4a3f5c9cfd","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-12-12-are-your-views-dumb-enough.md","excerpt":"Hi! As you can see, the title of this post consists of two parts. “Are your views dumb enough” refers to managing code between your classes in project, which is really interesting topic, but there is also a second part — “A way to run your tests without simulator”. Managing your code is pretty straight forward topic and you probably know what to expect from this part, but how do I want to run my tests without simulator? Isn’t a simulator something we really need to test an application? Turns out…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Are your views dumb enough? — A way to run your tests without simulator","tags":["iOS"],"date":"2016-12-11T23:00:00.000Z"},"fields":{"slug":"/blog/2016-12-12-are-your-views-dumb-enough"}}},{"node":{"id":"43feefde-c40e-5304-8930-91c6ece06665","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-12-11-3dtouch-peak-and-pop.md","excerpt":"In my previous post I wrote about adopting UIApplicationShortcutItems in your app. Now it's time to implement Peak&Pop - a feature provided by 3d Touch.  Get started First of all we need to check if our device supports force touch events. Then if our device is familiar with force touch we can easily register our UIViewController for force touch events. Take a look at this snippet: As you can see the above code uses the traitCollection property. It is available in every UIViewController and…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"3D Touch - Peak&amp;Pop feature.","tags":["iOS","swift","3d touch"],"date":"2016-12-10T23:00:00.000Z"},"fields":{"slug":"/blog/2016-12-11-3dtouch-peak-and-pop"}}},{"node":{"id":"57b24cc8-39e2-5c82-a50d-71554c0c27da","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-27-3dtouch-adopting-shortcut-items-to-your-app.md","excerpt":"With the beginning of the iPhone 6s, Apple has introduced a 3D Touch mechanism which is very cool thing. The 3D Touch is also available on\nthe newest iPhones 7. Nothing indicates that in the future Apple devices will run out of that feature so, here is a quick tutorial on how\nto improve your app using the one of the three main features of 3D Touch.  Modify your Info.plist file Add to your  Info.plist file a special key called UIApplicationShortcutItems. It should be an array. Add items to…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"3D Touch - Adopting shortcut items to your app.","tags":["iOS","swift","3d touch"],"date":"2016-11-26T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-27-3dtouch-adopting-shortcut-items-to-your-app"}}},{"node":{"id":"35cb0f57-ec9e-598e-9e1a-475f615d8157","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-09-improve-your-development-using-charles.md","excerpt":"In this post, I would like to describe you to set up a proxy using Charles desktop app. I believe that many of you work with API or consume some REST Service. If haven't heard about proxy yet I believe the knowledge from this post will be useful in your future development.\nThe following example concerns an iOS environment and configuring at the OSX system. What the proxy is? To tell you what the Proxy is I use the definition that I found in Charles documentation An HTTP Proxy is a server that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"Make your development better. Use the proxy.","tags":["iOS","swift","proxy","web"],"date":"2016-11-08T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-09-improve-your-development-using-charles"}}},{"node":{"id":"2998b0c1-680e-51c1-8d39-285f5b3fdbd7","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-11-06-purelayout-vs-anchors.md","excerpt":"Last week I've made basic comparison between two libraries that will help you layout your interfaces - PureLayout and SnapKit. You can find this comparison here. Today I'd lake to take the same examples and see how they work with NSLayoutAnchor. NSLayoutAnchor is available to us since iOS 9 and provides us with a new way of creating your constraints. If you do not like creating NSLayoutConstraints using it's initializers or visual format, and do not want any external dependencies for your layout…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"PureLayout vs NSLayoutAnchor - Great confrontation","tags":["iOS"],"date":"2016-11-05T23:00:00.000Z"},"fields":{"slug":"/blog/2016-11-06-purelayout-vs-anchors"}}},{"node":{"id":"f5aefbe5-a7b2-58e1-b7fc-f867b9029967","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-31-purelayout-vs-snapkit.md","excerpt":"At first, let me clear something out. I'm heavy PureLayout user. I've been creating my UIs in code for some time now and it's not looking like I'm going back to Interface Builder any time soon. I'm not saying IB is bad, but it's just not the way that I do things. I started working with PureLayout back in Objective-C days and I kept on using it in Swift as well. However, recently I've been interested in a framework called SnapKit, that offers a nice \"swifty\" way of building views in your…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"PureLayout vs SnapKit - Great confrontation","tags":["iOS"],"date":"2016-10-30T23:00:00.000Z"},"fields":{"slug":"/blog/2016-10-31-purelayout-vs-snapkit"}}},{"node":{"id":"b1e64df4-546a-5390-a0a4-7126a61b099a","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-22-reactiveswift-manage-your-memory.md","excerpt":"Memory management is a pretty important issue when talking about any kind of system. You can't pretend that your resources are unlimited, and give them out no matter what. When working with ReactiveSwift it's really easy to fall into the pit of wasted resources if you don't follow simple rules. Disposables Basic unit that will help us handle our memory management, when working with ReactiveSwift is disposable. At the same time that you start observing Signal, or start any work with Signal…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveSwift - Manage your memory!","tags":["iOS"],"date":"2016-10-21T22:00:00.000Z"},"fields":{"slug":"/blog/2016-10-22-reactiveswift-manage-your-memory"}}},{"node":{"id":"6813233f-76a5-56f3-89f6-d4cb5ac28c88","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-10-17-first-pod-created.md","excerpt":"The first Cocoapod created Hello, today I want to share with you my first created pod. It is called ContactCircularView and it allows you to create circular views with some text or image inside in an easy way. Main inspiration to create it was a Circles (as you can see below) in iOS Contact application.  iPhone Simulator screen shot from iOS Contacts app More information about my pod you can get via link to my Github : GitHub or Cocoapods site : CocoaPods I'll be grateful if you try it ;) This…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"kwysocki","author_id":null,"title":"My first Cocoapod created","tags":["iOS","swift","cocoapods"],"date":"2016-10-16T22:00:00.000Z"},"fields":{"slug":"/blog/2016-10-17-first-pod-created"}}},{"node":{"id":"74525441-c359-5609-8eaa-1a0b7b4f3136","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-8-swift-files-generator.md","excerpt":"For some time, I have been creating iOS apps without using storyboards at all. Because of this fact ,creating screens in the application is connected to some repetitive steps. You create a ViewController, then a View which will be presented in the controller. You want a PageViewController? Create one, set up ViewControllers that will be presented inside it. After some time, you can recognise a pattern and prepare a bunch of code snippets that will do the job for you. Or... You can prepare a code…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Swift files generator","tags":["iOS"],"date":"2016-01-07T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-8-swift-files-generator"}}}]}},"pageContext":{"limit":10,"skip":170,"numPages":23,"currentPage":18}},"staticQueryHashes":[]}