{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/20","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"caacd825-eed6-58cf-b779-d1325f1b8e37","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-03-quickly-access-application-documents-directory.md","excerpt":"Let me share a small trick that I use to quickly navigate to documents directory for an iOS application that runs in the simulator.\n It requires adding some small snippet of code to the app but it really pays off. Here's the snippet: In essence it creates a symbolic link to app documents directory and puts that symbolic link on your Desktop. Just add it to application:  didFinishLaunchingWithOptions: method and you will find SimulatorDocuments link recreated on your Desktop anytime you run the…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"michal","author_id":null,"title":"Quickly access Documents Directory for the iOS Simulator","tags":["iOS"],"date":"2015-12-02T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-03-quickly-access-application-documents-directory"}}},{"node":{"id":"7969b459-3b43-53d4-b905-b21d850c45e8","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-10-19-desymbolicate-crash-reports.md","excerpt":"I was struggling again with desymbolicating of iOS app crash logs and thought that it would be nice\nto have a handy script that is a bit easier to use than the multi step process I had been using thus far. There's no rocket science in it,\n just a simple script named desym that seems to work for me and probably will require more than\n one adjustment to work in general. The source code is here on GitHub. The idea is to put .ipa and .dsym.zip file in the same directory and then execute\n./desym.sh…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"michal","author_id":null,"title":"Desymbolicate crash reports from the command line","tags":["iOS"],"date":"2015-10-18T22:00:00.000Z"},"fields":{"slug":"/blog/2015-10-19-desymbolicate-crash-reports"}}},{"node":{"id":"5b3bab07-bfb3-52d7-863f-c327292ff784","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-10-02-apple-watch-iphone-data-transfer.md","excerpt":"Today's post will cover basic data transfer between your iPhone app and Apple Watch app.\nLet's assume that you have already created an Apple Watch extension in your project and you want to transfer some data to your watch.\nAs an example, we will be sending Event object to our watch, so let's have a look at Event class! The most important thing here is to implement NSCoding protocol. We will need it, because we won't be able to send pure Event object to our watch app, however we can easily send…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Data transfer between Apple Watch and iPhone","tags":["iOS"],"date":"2015-10-01T22:00:00.000Z"},"fields":{"slug":"/blog/2015-10-02-apple-watch-iphone-data-transfer"}}},{"node":{"id":"6a5ef111-dcd4-57ae-8d59-fcf2b662086c","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-29-queueing-audio-files.md","excerpt":"Today's short post will cover queueing audio files using Swift. In order to do this we will be using AVQueuePlayer. Import AVFoundation in order to use the AVQueuePlayer Create an instance of AVQueuePlayer. Ps. Hold it as instance variable. If you create it as local variable, you will lose it after exiting the scope and audio won't play. Add audio file to queue. Here we will be adding a file which is added to our project. In order to do this, we create an instance of AVPlayerItem and add it to…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Queueing audio files with AVQueuePlayer","tags":["iOS"],"date":"2015-08-28T22:00:00.000Z"},"fields":{"slug":"/blog/2015-08-29-queueing-audio-files"}}},{"node":{"id":"33dca79e-4202-5095-8ccd-2b9649fa60fe","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-24-simplistic-javascript-dependency-injection-es6-destructuring.md","excerpt":"Recently I got a bit tired with Angular's quirks and intricacies. To freshen up, I'm playing with framework-less JavaScript (Vanilla JS). I'm also getting more and more used to ES6 features. One of the outcomes by now is the idea for the Dependency Injection approach that stays simplistic, decoupled from any framework and still convenient to consume. Destructuring One of the features I like most in ES6 is destructuring. It introduces a convenient syntax for getting multiple values from arrays or…","frontmatter":{"excerpt":"Recently I got a bit tired with Angular's quirks and intricacies. To freshen up, I'm playing with framework-less JavaScript (Vanilla JS). I'm also getting more and more used to ES6 features. One of the outcomes by now is the idea for the Dependency Injection approach that stays simplistic, decoupled from any framework and still convenient to consume.","comments":true,"image":null,"author":"adam","author_id":null,"title":"Simplistic JavaScript dependency injection with ES6 destructuring","tags":["JavaScript","ES6"],"date":"2015-08-24T00:00:00.000Z"},"fields":{"slug":"/blog/2015-08-24-simplistic-javascript-dependency-injection-es6-destructuring"}}},{"node":{"id":"91a0ef83-b54b-593d-b758-25012444ae05","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-08-13-ios-simplest-star-rating-control-ever.md","excerpt":"Recently I had a need to show the simple rating control in one of our iOS apps - the typical row of stars, few leftmost highlighted, the more highlighted, the better the rating is - something as obvious as this:  My first thoughts were wandering around star images one after another, the hell with positioning with frames or multitude of Auto Layout constraints. Nah. The second take led me to EDStarRating, a library that does this pretty well. But all I needed was only to show few stars in a row…","frontmatter":{"excerpt":"Recently I needed to show the simple rating control in one of our iOS apps - the typical row of stars, few leftmost highlighted, the more highlighted, the better the rating is. My first thoughts were wandering around star images one after another, the hell with positioning with frames or multitude of Auto Layout constraints. Nah. I ended up with something much easier and elegant.","comments":true,"image":null,"author":"adam","author_id":null,"title":"iOS: The simplest star rating control ever","tags":["iOS"],"date":"2015-08-13T00:00:00.000Z"},"fields":{"slug":"/blog/2015-08-13-ios-simplest-star-rating-control-ever"}}},{"node":{"id":"a7bcf5f7-3b97-54d0-9494-652a51621ea4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-27-android-data-binding-part-2-observer-pattern-to-the-bone.md","excerpt":"In the previous part I've described typical problems we have to face when developing applications on Android. I've also highlighted that some of them may be mitigated when data binding API is utilized properly. It's time to dive into more details of how this promising API works. Observer Pattern At the root of many of solutions we find in today's APIs is a design pattern. In case of the discussed Android API it is Observer Pattern applied to the bone. In fact this particular pattern is so common…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Android Data Binding Part 2: Observer pattern to the bone","tags":["android"],"date":"2015-07-27 08:45"},"fields":{"slug":"/blog/2015-07-27-android-data-binding-part-2-observer-pattern-to-the-bone"}}},{"node":{"id":"33d4bf78-9a34-5bab-8c81-0ea1882cbff1","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-20-android-data-binding-part-1-why-it-is-important.md","excerpt":"Android application code often suffers from being more verbose than it could be. As libraries such as Android Annotations and ButterKnife have shown that's only partially due to tediousness of Java. The recently announced Android Data Binding library can remove at least part of the boilerplate code we need to write. Since I've always liked Presentation Model pattern (MVVM) this is very dear to my heart. However just getting rid of a tedious code is not the main reason I'm so happy to see the new…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Android Data Binding Part 1: Why it is important","tags":["android"],"date":"2015-07-20 08:36"},"fields":{"slug":"/blog/2015-07-20-android-data-binding-part-1-why-it-is-important"}}},{"node":{"id":"3874d18a-4235-5307-a081-1c233f7443b9","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-07-12-handling-different-user-types-in-android-application.md","excerpt":"In the previous post you can read how to use Session object to maintain current user information through the application lifecycle. Now we'll explore different options of implementing varying behavior depending on user type. When an app has only one user type I find it neat when an application allows me to use it before I'm forced to create an account or sign in. In such a case there will be a, potentially very long, time where we have no way of identifying the user. At the same time we'll want…","frontmatter":{"excerpt":null,"comments":null,"image":null,"author":"piotr","author_id":null,"title":"Handling different user types in Android application","tags":["android"],"date":"2015-07-12 23:40"},"fields":{"slug":"/blog/2015-07-12-handling-different-user-types-in-android-application"}}},{"node":{"id":"c726ec66-83cc-5beb-b9b9-0ce1c158e45c","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-06-30-maintaining-current-user-information-in-android.md","excerpt":"Every but trivial android application needs to maintain information about current user - regardless if he has authenticated or not. While this may sound easy there are still at least handful of ways one can do it - in this article I'm going to explore couple of them. Keeping state in custom Application class This technique boils down to having custom application class like so: While the above is both easy to write and understand there are several problems with it. First and foremost if you would…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Maintaining current user information in Android","tags":["android"],"date":"2015-06-30T00:00:00.000Z"},"fields":{"slug":"/blog/2015-06-30-maintaining-current-user-information-in-android"}}}]}},"pageContext":{"limit":10,"skip":190,"numPages":23,"currentPage":20}},"staticQueryHashes":[]}