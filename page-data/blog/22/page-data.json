{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/22","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"0bbb8e15-cfe9-546b-9f97-8f9d96e6097b","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-25-anchor-child-element-click.md","excerpt":"I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual. The bug The bug report stated that \"Clicking on a label causes page reload\". That should be an easy one I thought to myself and openeded chrome inspector to see a structure of DOM. Here's a simplified version of markup: My intention was to have different behaviour when an anchor or a span element is clicked. Just as in the example above when a is clicked anchorAction should…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Anchor child element click","tags":["html","javascript"],"date":"2015-01-25T17:00:00.000Z"},"fields":{"slug":"/blog/2015-01-25-anchor-child-element-click"}}},{"node":{"id":"4ab89543-6c93-521b-9c27-37ee7e217e06","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-11-frame-video-view.md","excerpt":"VideoView is the most straightforward way to show video content in layout. \nIt took a few lines of code to setup and show for example mp4 file. \nIt's fine when you don't care about UX too much, but when you do, things are going to be annoying.\nWhen you tested app for different cases like: change device orientation, swipe the view, lock screen or go to home screen and back to the app, you probably know what I'm talking about. \nIf you don't, take a look at: \nVideoView Black Screen \nVideoView Black…","frontmatter":{"excerpt":"VideoView is the most straightforward way to show video content in layout. <br /> It took a few lines of code to setup and show for example mp4 file. <br /> It's fine when you don't care about UX too much, but when you do, things are going to be annoying.","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"How to avoid flickering and black screen issues when using VideoView?","tags":["android","videoview"],"date":"2015-01-10T23:00:00.000Z"},"fields":{"slug":"/blog/2015-01-11-frame-video-view"}}},{"node":{"id":"c4f8f30f-0023-54de-b7de-3763482b7883","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-06-lazy-apk.md","excerpt":"At Bright Inventions we use TeamCity as a continuous integration server. Apart from building, running tests and uploading artifacts we sometimes use it to quickly distribute an android application to clients and test team. However we found using TeamCity UI on a mobile device isn't as pleasing as it could be. That's why we usually recommend downloading updates through a dedicated application such as TeamCity Downloader. While TeamCity Downloader is really easy to use I found it lacks a couple of…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Lazy Apk - a simple TeamCity artifact downloader","tags":["android","TeamCity"],"date":"2015-01-06T21:00:00.000Z"},"fields":{"slug":"/blog/2015-01-06-lazy-apk"}}},{"node":{"id":"2196cd78-ca7c-5d3a-9715-f264138b37db","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-12-21-cocoaheads-tricity-reactivecocoa.md","excerpt":"On Thursday 18th December 2014 I gave a small presentation about ReactiveCocoa to the local Cocoaheads Tricity group. Cocoaheads is a group of passionate iOS and MacOS X developers willing to share their knowledge and learn. If you've never heard of ReactiveCocoa the presentation might plant a seed of interest: It's probably not easy to get started thinking in FRP terms to get most out of ReactiveCocoa - but once you do, using the library is a pleasant experience.","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Reactive Cocoa presented on CocoaHeads Tricity","tags":["iOS","ReactiveCocoa","CocoaHeads"],"date":"2014-12-21T00:00:00.000Z"},"fields":{"slug":"/blog/2014-12-21-cocoaheads-tricity-reactivecocoa"}}},{"node":{"id":"046cce58-3699-5e0e-a7d4-eb25ceeca2da","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-12-09-google-play-services-is-no-longer-a-monolith.md","excerpt":"Nowadays it's getting harder and harder to build a meaningful app and not rely on Google Play Services to aid us in some commonly required features such as maps, better location provider, geo fencing and so much more. Unfortunately up until now the library shipped as a giant monolith ripping us from one third of dex method limit. For curious reader here's are method counts in couple of versions: Version Method Count 3.2.65 6330 4.4.52 16933 5.0.89 20312 6.1.71 23641 and a full breakdown. Google…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Google Play Services is no longer a giant monolith","tags":["android"],"date":"2014-12-09T10:00:00.000Z"},"fields":{"slug":"/blog/2014-12-09-google-play-services-is-no-longer-a-monolith"}}},{"node":{"id":"5784c40b-a928-5636-ad1e-b4d3d3f8242a","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-20-integrate-slf4j-with-crashlytics.md","excerpt":"As I mentioned in my previous post having meaningful log entries comes handy during development. When an app reaches beta testers as well as goes live it's equally or even more important to be able to figure out why the app you've carefully coded isn't behaving as it should. Testing the app on all android flavours is literally impossible that's why getting an insight into what caused a crash is vital. Crashlytics Error reporting providers are getting more and more popular. There are plenty of…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"piotr","author_id":null,"title":"Integrate slf4j with Crashlytics","tags":["android"],"date":"2014-11-20T21:00:00.000Z"},"fields":{"slug":"/blog/2014-11-20-integrate-slf4j-with-crashlytics"}}},{"node":{"id":"81de4cd6-62ca-54d9-938c-b1baa25173f8","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-11-playing-with-material-design-toolbar-palette.md","excerpt":"Since Android L(ollipop) was presented in June at Google I/O, only two devices on market can run it officially. Nexus 6 and Nexus 9 were released a week ago, and these two guys are ready to go with most recent system from Google, but what about other devices? My Nexus 5 still tryin update everyday, but still no effects :)\nHopefully, we can use some part of Material Design with devices running Android 2.1 and higher, because most of implementation was placed in android-support-v7. I wrote simple…","frontmatter":{"excerpt":"People around the world are waiting for Google to push Lollipop to theirs smartphones. Material Design completely changed the appearance of Android, and did it right. Material Design is really beautiful. But who says we have to wait to see Material.Theme in action? Most of features has been packed into android-support-library. Use it and build app with material for pre-lollipop devices.","comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Playing with Material Design, Toolbar and Palette","tags":["android","materialdesign","android-support-library"],"date":"2014-11-10T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-11-playing-with-material-design-toolbar-palette"}}},{"node":{"id":"bbcee8ca-20e0-50d0-8454-1f7452476684","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-07-xcodeforinjection-meets-command-line.md","excerpt":"I find InjectionForXcode to be an indispensable tool in my daily iOS development. It works brilliantly but generates a lot of noise that I just couldn’t cope with. I use AppCode. Whenever I execute Run -> Patch Project For Injection there’s a flood of messages telling me about changes in each individual prefix.pch file. There’s one prefix file for each CocoaPod in the project so you can imagine the pain of having to press “OK” button in a dozen of alert messages. Additionally after each file has…","frontmatter":{"excerpt":"Meet Injection Helper, a small utility for making InjectionForXcode more friendly to use. Get rid of superfluous messages and a flood of XCode windows opened any time you patch/revert your project.","comments":true,"image":null,"author":"michal","author_id":null,"title":"InjectionForXcode meets command line","tags":["ios","appcode","xcode","injectionforxcode","gem"],"date":"2014-11-06T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-07-xcodeforinjection-meets-command-line"}}},{"node":{"id":"5a66b150-41f4-5689-aa67-10f71da43a57","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-05-attaching-sharejs-to-select.md","excerpt":"One thing that I found missing in ShareJS library was the possibility to attach live concurrent editing to HTML <select> element. Out of the box it works only with text fields - <input> and <textarea> using doc.attachTextarea(elem) function. Working around that deficiency wasn't so trivial. ShareJS works with Operational Transformations that extracts each logical change to the text (addition or removal) and sends only the change information over the wire. It is great for textual elements, but…","frontmatter":{"excerpt":"One thing that I found missing in ShareJS library was the possibility to attach live concurrent editing to HTML &lt;select&gt; element. Out of the box it works only with text fields - &lt;input&gt; and &lt;textarea&gt;. Here is the workaround.","comments":true,"image":null,"author":"adam","author_id":null,"title":"Attaching ShareJS to select HTML element","tags":["sharejs","javascript"],"date":"2014-11-04T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-05-attaching-sharejs-to-select"}}},{"node":{"id":"6157ade7-50ab-5f44-876c-b21136b75af4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-11-04-android-listview-with-sections.md","excerpt":"If you need to implement Android ListView with sections like in iOS world then the code below can help you with that. The first thing you need is to implement two View providers, one for section view and second for section entry view. To do that you just have to create a class that implements ListViewWithSectionsAdapter.ViewProvider interface, example below. Another thing you have to implement is DataProvider: Then you need to create an instance of ListViewWithSectionsAdapter class and assing…","frontmatter":{"excerpt":"ListViewWithSectionsAdapter for Android ListView, simple way to implement list view with sections.","comments":true,"image":null,"author":"daniel","author_id":null,"title":"ListViewWithSectionsAdapter for Android ListView, simple way to implement list view with sections.","tags":["android"],"date":"2014-11-03T23:00:00.000Z"},"fields":{"slug":"/blog/2014-11-04-android-listview-with-sections"}}}]}},"pageContext":{"limit":10,"skip":210,"numPages":23,"currentPage":22}},"staticQueryHashes":[]}