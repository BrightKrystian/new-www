{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/call-apply-bind-methods-in-javascript","result":{"data":{"markdownRemark":{"html":"<p>Working with JavaScript 'this' keyword can be tricky. Not knowing the background rules may end up with the famous “it doesn’t work and I don’t know why”. It’s good to know the theory before putting things into practice. <a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">'call()'</a>,  <a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Function/apply\">'apply()'</a>  and <a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">'bind()'</a> methods can come in handy while setting the 'this' value.</p>\n<h2>Basic Rules Worth Remembering:</h2>\n<ol>\n<li>'this' always refers to an object.</li>\n<li>'this' refers to an object which calls the function it contains.</li>\n<li>In the global context 'this' refers to either window object or is undefined if the ‘strict mode’ is used.</li>\n</ol>\n<p>I would like to focus on the first two rules specifically.</p>\n<pre><code class=\"language-javascript\">var car = { \n    registrationNumber: \"GA12345\",\n    brand: \"Toyota\",\n\n    displayDetails: function(){\n        console.log(this.registrationNumber + \" \" + this.brand);\n    }\n}\n</code></pre>\n<p>The above will work perfectly fine as long as we use it this way:</p>\n<pre><code class=\"language-javascript\">car.displayDetails()\n</code></pre>\n<p>But what if we want to borrow a method?</p>\n<pre><code class=\"language-javascript\">var myCarDetails =  car.displayDetails;\nmyCarDetails()\n</code></pre>\n<p>Well, this won’t work as the 'this' will be now assigned to the global context which doesn’t have neither the 'registrationNumber' nor the 'brand' property. </p>\n<h2>The 'bind()' Method</h2>\n<p>For such cases we can use the ECMAScript 5 'bind()' method of the Function.prototype property. This means 'bind()' can be used by every single function. </p>\n<pre><code class=\"language-javascript\">var myCarDetails = car.displayDetails.bind(car)\nmyCarDetails()\n</code></pre>\n<p>The 'bind()' method creates a new function where 'this' refers to the parameter in the parenthesis in the above case “car”. This way the 'bind()' method enables us to call a function with a specified 'this' value.</p>\n<p>What if we would like to pass a parameter to the displayDetails function? We can use the bind method again. The following argument of the 'bind()' method will provide an argument to the function 'bind()' is called on. </p>\n<p>Let me rewrite the car object:</p>\n<pre><code class=\"language-javascript\">var car = { \n    registrationNumber: \"GA12345\",\n    brand: \"Toyota\",\n\n    displayDetails: function(ownerName){\n        console.log(ownerName + \", this is your car: \" + this.registrationNumber + \" \" + this.brand);\n    }\n}\n</code></pre>\n<p>Example of passing arguments with 'bind()':</p>\n<pre><code class=\"language-javascript\">var myCarDetails = car.displayDetails.bind(car, \"Vivian\")\n</code></pre>\n<h2>'call()' and 'apply()' Methods</h2>\n<p>Similar but slightly different usage provides the 'call()' and 'apply()' methods which also belong to the Function.prototype property. </p>\n<p>This time there is a 'car' object without the displayDetails function, which is located in the global context.</p>\n<pre><code class=\"language-javascript\">var car = { \n           registrationNumber: \"GA12345\",\n           brand: \"Toyota\"\n       }\n\nfunction displayDetails(ownerName){\n              console.log(ownerName + \", this is your car: \" + this.registrationNumber + \" \" + this.brand);\n</code></pre>\n<p>We can use the 'apply()' function:</p>\n<pre><code class=\"language-javascript\">displayDetails.apply(car, [\"Vivian\"])\n</code></pre>\n<p>Or</p>\n<pre><code class=\"language-javascript\">displayDetails.call(car, \"Vivian\")\n</code></pre>\n<p>Note that when using the 'apply()' function the parameter must be placed in an array. 'call()' accepts an argument list. Both are great tools for borrowing functions in JavaScript. </p>\n<p>'bind()', 'call()' and 'apply()' functions can make your life easier when you need to set the value of ‘this’.\nHope the post was helpful. Have a happy day and enjoy the coding!</p>","excerpt":"Working with JavaScript 'this' keyword can be tricky. Not knowing the background rules may end up with the famous “it doesn’t work and I don…","frontmatter":{"slug":null,"title":"call(), apply() and bind() Methods in JavaScript","description":null,"author":"monika","tags":["javascript","bind","apply","call"],"date":"2017-10-31T23:00:00.000Z","image":null},"timeToRead":2,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2017-11-01-call-apply-bind-methods-in-javascript.md"},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2017-11-01-call-apply-bind-methods-in-javascript.md"}},"staticQueryHashes":["2189233960","3181594896"]}