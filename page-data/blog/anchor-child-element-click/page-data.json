{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/anchor-child-element-click","result":{"data":{"markdownRemark":{"html":"<p>I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual.</p>\n<h2>The bug</h2>\n<p>The bug report stated that <em>\"Clicking on a label causes page reload\"</em>. That should be an easy one I thought to myself and openeded chrome inspector to see a structure of DOM. Here's a simplified version of markup:</p>\n<pre><code class=\"language-html\">&#x3C;a  href=\"\" ng-click=\"anchorAction($event)\" ng-controller=\"ActionCtrl\">\n  Anchor\n  &#x3C;span ng-click=\"childAction($event)\">\n  A child\n  &#x3C;/span>\n&#x3C;/a>\n</code></pre>\n<pre><code class=\"language-javascript\">module.controller('ActionCtrl', function($scope){\n  $scope.anchorAction = function($event){\n    console.log('anchorAction');\n  };\n  $scope.childAction = function($event){\n    $event.stopPropagation();\n    console.log('childAction');\n  };\n});\n</code></pre>\n<p>My intention was to have different behaviour when an anchor or a span element is clicked. Just as in the example above when <code>a</code> is clicked <code>anchorAction</code> should be printed whereas the same event triggered on <code>span</code> should <strong>only</strong> print <code>childAction</code>.\nInterestingly the actual behaviour is different.</p>\n<p>When the anchor is clicked indeed a function attached by <code>ng-click</code> is executed properly. Note that even though we <strong>did not</strong> call <code>$event.preventDefault()</code> a page reload is not triggered. This is due to <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/directive/a.js\"><code>htmlAnchorDirective</code></a> provided by angularjs which effectively prevents empty <code>href</code> attribute from taking action.</p>\n<p>A click on <code>span</code> element will stop event from bubbling up document tree - thus preventing <code>anchorAction</code> from executing. In addition it will obviously print <code>childAction</code> and to my surprise <strong>it will cause a page reload</strong>.</p>\n<p>Wait a second didn't we just prevent the event from traveling up to the anchor element? Yes. So why does the page reload anyway?</p>\n<h2>Searching for a root cause.</h2>\n<p>Almost immediately I've verified that calling <code>$event.preventDefault()</code> inside <code>childAction</code> fixes the problem. The fix got checked in and will be deployed soon - case closed. I was unhappy though because I didn't understand this behaviour at all.</p>\n<p>At first I naively thought that it might be a Chrome bug - a quick check in FF and IE diminished this stupid idea.</p>\n<p>Then I thought that it may be related to angularjs in some strange manner so I've prepared <a href=\"http://jsfiddle.net/83ov5tgm/4/\">an example fiddle</a> that demonstrates the issue. I've searched for and read many answers on <a href=\"http://stackoverflow.com/\">Stack Overflow</a> and other forums but none of them gave an in-depth explanation.</p>\n<h2>The HTML spec</h2>\n<p>Since the example fiddle demonstrated same behaviour in all major desktop browsers I realised that it must be part of HTML spec - after an hour or so it turned out that it was a good  hunch.</p>\n<p>Up until now I thought that an <code>event</code> (and a <code>click</code> event in particular) default action is dependent on an element it visits when it is dispatched through a DOM tree. In the above example it would mean that since I've stopped <code>click</code> from bubbling up it should not reach <code>a</code> element and because of that it <strong>should not</strong> execute its default action - in our case a page reload.</p>\n<p>It turned out that my assumptions about events dispatching and elements default actions were wrong.</p>\n<p>The relevant part of the specification describes <a href=\"http://www.w3.org/html/wg/drafts/html/master/editing.html#activation\">activation behavior</a> with an explanation of what I've experienced:</p>\n<blockquote>\n<ol>\n<li>Let target be the element designated by the user (the target of event).</li>\n</ol>\n</blockquote>\n<ol start=\"2\">\n<li>If target is a canvas element, run the canvas MouseEvent rerouting steps. If this changes event's target, then let target be the new target.</li>\n<li>Set the click in progress flag on target to true.</li>\n<li><strong>Let e be the nearest activatable element of target (defined below), if any</strong>.</li>\n<li>If there is an element e, run pre-click activation steps on it.</li>\n<li><strong>Dispatch event (the required click event) at target.</strong>\nIf there is an element e and the click event is not canceled, run post-click activation steps on element e.\nIf there is an element e and the event is canceled, run canceled activation steps on element e.</li>\n<li>Set the click in progress flag on target to false.</li>\n</ol>\n<p>The most relevant steps are <em>4.</em> and <em>6.</em> as they clearly indicate that <em>target</em> and <em>nearest activatable element</em> that triggers default action can be <strong>separate</strong>. What's left to have a complete understanding is how <em>nearest activatable element</em> is defined:</p>\n<blockquote>\n<p>Given an element target, the nearest activatable element is the element returned by the following algorithm:</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>If target has a defined activation behavior, then return target and abort these steps.</li>\n<li>If target has a parent element, then set target to that parent element and return to the first step.</li>\n<li>Otherwise, there is no nearest activatable element.</li>\n</ol>\n</blockquote>\n<p>Now it is obvious why a default action of an <code>anchor</code> is executed even though a <code>click</code> event did not bubble up from its child.</p>\n<p><em>This article is cross-posted with <a href=\"http://miensol.pl\">my personal blog</a></em></p>","excerpt":"I had to solve a seemingly trivial bug in an angularjs based application that turned out to be more interesting than usual. The bug The bugâ€¦","frontmatter":{"slug":null,"title":"Anchor child element click","description":null,"author":"piotr","tags":["html","javascript"],"date":"2015-01-25T17:00:00.000Z","image":null},"timeToRead":4,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-25-anchor-child-element-click.md"},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-01-25-anchor-child-element-click.md"}},"staticQueryHashes":["2189233960","3181594896"]}