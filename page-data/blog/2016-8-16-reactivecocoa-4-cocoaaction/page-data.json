{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/2016-8-16-reactivecocoa-4-cocoaaction","result":{"data":{"markdownRemark":{"html":"<p><code>CocoaAction</code> is a wrapper around <code>Action</code> type that is available in ReactiveCocoa. (<a href=\"http://blog.brightinventions.pl/reactivecocoa-4-action/\">Here </a> you can read more about <code>Action</code>). We use <code>CocoaAction</code> to bind our <code>Actions</code> to GUI controls. Let's see a quick example of how it works.</p>\n<h1>Example</h1>\n<p>Let's imagine a situation, where we have we have a <code>UISwitch</code> control. Every time we switch it on or off, we want to change a <code>MutableProperty</code> text value.</p>\n<pre><code class=\"language-swift\">var text = MutableProperty&#x3C;String>(\"Switch is on\")\nlet switchControl = UISwitch()\n</code></pre>\n<p>First, let's create <code>Action</code> that will take <code>Bool</code> (switch's value) as an input, return <code>String</code> as output and complete without errors.</p>\n<pre><code class=\"language-swift\">let switchAction = Action&#x3C;Bool, String, NoError>({ (isOn) -> SignalProducer&#x3C;String, NoError> in\n  return SignalProducer&#x3C;String, NoError> { observer, disposable in\n    observer.sendNext(isOn ? \"Switch is on\" : \"Switch is off\")\n    observer.sendCompleted()\n  }\n})\n</code></pre>\n<p>We have to wrap this action into <code>CocoaAction</code> that can be bound to <code>UIControl</code>. In order to do this, we have to remember to transform our <code>UISwitch's</code> value to <code>Action's</code> <code>Bool</code> input.</p>\n<pre><code class=\"language-swift\">let switchCocoaAction = CocoaAction(switchAction, { (control) -> Bool in\n    let control = control as! UISwitch\n    return control.on\n})\n</code></pre>\n<p>Now we can bind our <code>CocoaAction</code> to <code>UISwitch's</code> value change event. Remember that we have to keep reference to our switchCocoaAction.</p>\n<pre><code class=\"language-swift\">switchControl.addTarget(switchCocoaAction, action: CocoaAction.selector, forControlEvents: .ValueChanged)\n</code></pre>\n<p>Finally, we can observe our <code>values</code> that are generated by executing our action and change our text value. We can do it quickly by using &#x3C;~ operator that is available in <code>ReactiveCocoa</code>.</p>\n<pre><code class=\"language-swift\">text &#x3C;~ switchAction.values\n</code></pre>\n<p><em>This article is cross-posted with my <a href=\"http://eluss.github.io/\">my personal blog</a>.</em></p>","excerpt":"CocoaAction is a wrapper around Action type that is available in ReactiveCocoa. (Here  you can read more about Action). We use CocoaActionâ€¦","frontmatter":{"slug":null,"title":"ReactiveCocoa 4 - CocoaActions","description":null,"author":"eliasz","tags":["iOS"],"date":"2016-08-15T22:00:00.000Z","image":null},"timeToRead":1,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-8-16-reactivecocoa-4-cocoaaction.md"},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-8-16-reactivecocoa-4-cocoaaction.md"}},"staticQueryHashes":["2189233960","3181594896"]}