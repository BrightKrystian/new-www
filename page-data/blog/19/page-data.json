{"componentChunkName":"component---src-templates-blog-list-template-tsx","path":"/blog/19","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"52d2a283-1f7b-57ab-96e7-697a860a28e5","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-29-reactivecocoa-4-signal.md","excerpt":"Today, let's take a look at basic aspect of ReactiveCocoa - Signal. What is it? A signal is an event stream. When you create a Signal, you decide what type of values and errors are sent over it. That's different to what it used to be in ReactiveCocoa 2, where RACSignal did not have a value type attached to it. Generally, Signals are representation of event streams that are already in progress. Each signal may have multiple observers, that will detect events pushed inside the stream. A signal may…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - Signal","tags":["iOS"],"date":"2016-01-28T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-29-reactivecocoa-4-signal"}}},{"node":{"id":"3232383e-ccc6-5a12-bed2-8b08d06b6b71","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-25-reactivecocoa-4-signal-producer.md","excerpt":"Today we will take a look at SignalProducer class which is provided with ReactiveCocoa 4. How should we treat SignalProducer? It should be treated as representation of a operations/tasks. As an example, take a look at this method, which returns a SignalProducer instance. We can use it to create a signal producer and assign it to a variable. Then when we have a producer that we can ask for signals. If we don't start an actual signal, nothing will happen. What is important here, is the fact that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - SignalProducer","tags":["iOS"],"date":"2016-01-24T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-25-reactivecocoa-4-signal-producer"}}},{"node":{"id":"e784106e-5548-5ad4-b4b9-0d3c1156beb4","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-21-reactivecocoa-4-mutableproperty.md","excerpt":"MutableProperty which comes with ReactiveCocoa allows us to track variable's changes. Let's take a quick look on how it actually works. Let's assume, that we want to create a bank account balance variable, that we will be tracking later on.  MutableProperty has three fields that we are especially interested in. Value First one is value, which grants us access to a current value of our property. Everytime we change a this value, all observers of signals created by a producer get notified about it…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - MutableProperty","tags":["iOS"],"date":"2016-01-20T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-21-reactivecocoa-4-mutableproperty"}}},{"node":{"id":"e6d1ecbc-d3a0-538b-bc14-71c78938e95d","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-18-my-thoughts-on-statefulviewcontroller.md","excerpt":"I had a chance to play a little bit with a nice pod that is called StatefulViewController, created by Alexander Schuch. StatefulViewController works with both UIView and UIViewController, and allows you to introduce placeholders for their different states: Loading, Error, Empty or Content. Everything is based on an intuitive protocol and after providing your placeholder views and implementing required methods everything works like a charm. You can find this pod on Alexander's github. I've looked…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"My thoughts on - StatefulViewController","tags":["iOS"],"date":"2016-01-17T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-18-my-thoughts-on-statefulviewcontroller"}}},{"node":{"id":"1f293c1d-0fbc-5f0b-ac4c-5f780dafb928","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-15-custom-xcode-key-bindings.md","excerpt":"When I started writing Swift code, I found out that my beloved IDE(AppCode) for Objective-C, was not doing as well as I thought it would. Moreover, I've noticed that XCode did better job in terms of handling CocoaPods, autocompletion, debugging etc. It was more than enough for me to say sorry to XCode and leave AppCode for some time to let it solve it's problems. I really miss it's Objective-C features like code refactoring and it's ability to generate code, but there is no place for…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"Custom XCode key bindings","tags":["iOS"],"date":"2016-01-14T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-15-custom-xcode-key-bindings"}}},{"node":{"id":"f629a9b3-e3f5-5bea-b9c8-51762eb623ee","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-1-13-my-thoughts-on-whisper.md","excerpt":"Lately I've come across a nice pod which makes in-app messaging easier and decided to give it a quick look. I've created a test project in order to see how the pod behaves and my first impression was... \"That was easy!\". If you want to find out how to use this pod, check out Hyperoslo's github, which shows how easy it is to start sending your messages! I took a quick look into the source code of this pod and instantly found two things that caught my eye. Creating UI components First thing that…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"My thoughts on - Whisper","tags":["iOS"],"date":"2016-01-12T23:00:00.000Z"},"fields":{"slug":"/blog/2016-1-13-my-thoughts-on-whisper"}}},{"node":{"id":"90321721-103a-5005-a0a2-db86f5b34bfa","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2016-08-07-reactivecocoa-4-action.md","excerpt":"Today I'll tell you about an Action type that is available in ReactiveCocoa 4. Action is pretty straightforward, It takes input, does some work and returns output. Moreover, it can fail and provide us with an Error type. Let's look at creation of a simple action that takes Int as an input and returns String or NSError if it fails. Execution How do we execute it? In order to do that we have to perform two steps. Create Producer Apply method will return a SignalProducer with Action's output as…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"ReactiveCocoa 4 - Action","tags":["iOS"],"date":"2016-08-06T22:00:00.000Z"},"fields":{"slug":"/blog/2016-08-07-reactivecocoa-4-action"}}},{"node":{"id":"8bbf4eb7-b6b2-5f9b-be46-5926a8184dab","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-8-04-saving-and-loading-data-to-iOS-device.md","excerpt":"Lately I've spent some time wrtiting an app for myself. It is supposed to let you create tasks, mark them as done/undone and then track your progress. I've called it \"Habit Tracker\" and it is available\nhere. While writing this utility I came across a few interesting issues and this blogpost will cover one of them. Saving and Loading data The feature that \"Habit tracker\" surely needed was ability to store and load users tasks. Core data seemed a bit overkill for me, so I decided to use…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"NSKeyedArchiver/Unarchiver","tags":["iOS"],"date":"2015-08-03T22:00:00.000Z"},"fields":{"slug":"/blog/2015-8-04-saving-and-loading-data-to-iOS-device"}}},{"node":{"id":"77688ea0-7b65-562d-8225-9efe3b54f07f","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-15-logging-with-retrofit2.md","excerpt":"Retrofit has been updated to 2.0 version.\nIt's a major change in the one of the most popular library for Android platform.\nA lot of things have been changed out there but in this blog post I want to cover how to setup logging properly. Retrofit 1.x - old way In Retrofit 1.x we just call: Retrofit 2.x - new way In Retrofit 2 you should use HttpLoggingInterceptor. Add dependency to build.gradle: Create Retrofit object like follow: RetrofitAdapter doesn't exsist any longer, we have Retrofit class…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"mateuszklimek","author_id":null,"title":"Logging with Retrofit 2","tags":["android"],"date":"2015-12-14T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-15-logging-with-retrofit2"}}},{"node":{"id":"7189a5d8-fafc-5e78-9ac0-782af862db75","fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2015-12-14-3-tips-for-ios-calabash-beginners.md","excerpt":"Have you ever felt that your app needs UI tests? Are you tired of checking behaviours of your application again and again? Consider using Calabash! What is Calabash? It is an open source framework that is constantly supported by Xamarin. Calabash will let you run your UI tests written in Cucumber on iOS and Android. Moreover, it's really easy to read for people that are not familiar with programming. If you started writing UI tests in Calabash and it isn't going as smooth as you expected, then…","frontmatter":{"excerpt":null,"comments":true,"image":null,"author":"eliasz","author_id":null,"title":"3 tips for iOS Calabash beginners","tags":["iOS"],"date":"2015-12-13T23:00:00.000Z"},"fields":{"slug":"/blog/2015-12-14-3-tips-for-ios-calabash-beginners"}}}]}},"pageContext":{"limit":10,"skip":180,"numPages":23,"currentPage":19}},"staticQueryHashes":[]}