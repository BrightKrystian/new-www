{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/sharejs-073-working-example","result":{"data":{"markdownRemark":{"html":"<p>I’m experimenting with <a href=\"http://sharejs.org/\">ShareJS</a> library, which is intended to allow live concurrent editing like in Google Docs. The demo on their website seems incredibly easy, even though later on the page they are so cruel: “<em>ShareJS is mostly working, but it’s still a bit shit.</em>”. I wouldn’t be so harsh as I was able to have it up and running in less than few hours. But the fact is it wasn’t as easy as it seemed.</p>\n<p>It looks like the main problem with current state of ShareJS is what is pretty common in wild and uncontrolled open source world - lack of proper documentation. Here the problem is even worse. There are <a href=\"https://github.com/share/ShareJS/wiki\">some docs</a> and <a href=\"http://sharejs.org/demos.html\">examples</a>, but most of it is either incomplete or outdated. ShareJS.org website runs on ShareJS 0.5, while the most recent release is 0.7.3, with no backward compatibility between those releases. I think it will be less harmful if there was no examples at all - right now they are more misleading than helpful. It was a bit frustrating when even the shortest and simplest snippet from their website didn’t work, failing on non-existing functions being called.</p>\n<p>Anyway, I was able to figure out what I need to change to have the simple demo running, both server- and client-side. Here it is, in case you have the same struggle, too.</p>\n<p>On <strong>server-side</strong>, I’m running CoffeeScript WebSocket server, almost like in <a href=\"https://github.com/share/ShareJS/blob/master/examples/ws.coffee\">the original sample</a>. I just needed few changes in order to have it running with <a href=\"https://github.com/senchalabs/connect#readme\">Connect 3</a> - logging and static serving middlewares are no longer included in Connect out of the box, so I used <a href=\"https://github.com/expressjs/morgan\"><code>morgan</code></a> and <a href=\"https://github.com/expressjs/serve-static\"><code>serve-static</code></a>, respectively. Here is the only changed part around Connect middlewares initialization:</p>\n<pre><code class=\"language-CoffeeScript\">app = connect()\napp.use morgan()\napp.use '/srv', serveStatic sharejs.scriptsDir\napp.use serveStatic \"#{__dirname}/app”\n</code></pre>\n<p>Go here for full Gist: <a href=\"https://gist.github.com/NOtherDev/f288b939d19499060e1b\">ShareJS 0.7.3 server-side code</a>.</p>\n<p>I’m exposing client JavaScript libraries provided with ShareJS under <code>/srv</code> path and the client-facing web application files, physically located in <code>/app</code> on my filesystem, are exposed directly in the root path.</p>\n<p><strong>Client-side</strong> was a bit harder. Running the original code from the main ShareJS.org website wasn’t successful.</p>\n<pre><code class=\"language-JavaScript\">sharejs.open('blag', 'text', function(error, doc) {\n  var elem = document.getElementById('pad');\n  doc.attach_textarea(elem);\n});\n</code></pre>\n<p>It tries to call <code>sharejs.open</code> function, which yields “<code>TypeError: undefined is not a function</code>” error for a simple reason - there is no longer “<code>open</code>” function on <code>sharejs</code> global variable. Fiddling around, I found an example that is using more verbose call like this:</p>\n<pre><code class=\"language-JavaScript\">var ws = new WebSocket('ws://127.0.0.1:7007');\nvar share = new sharejs.Connection(ws);\nvar doc = share.get('blag', 'doc');\n\nif (!doc.type) {\n    doc.create('text');\n}\n\ndoc.whenReady(function () {\n    var elem = document.getElementById('pad');\n    doc.attachTextarea(elem);\n});\n</code></pre>\n<p>Seemed legitimate and didn’t fail immediately, but I was getting \"<code>Operation was rejected (Document already exists). Trying to rollback change locally.</code>” error message anytime except the first time. The code was calling <code>doc.create('text')</code> every time and that was clearly wrong, I should get <code>doc.type</code> pre-populated somehow. The solution is to subscribe to the document first and move checking the type and creating when needed to the function called after the document is ready - like this:</p>\n<pre><code class=\"language-JavaScript\">var ws = new WebSocket('ws://127.0.0.1:7007');\nvar share = new sharejs.Connection(ws);\nvar doc = share.get('blag', 'doc');\ndoc.subscribe();\n\ndoc.whenReady(function () {\n    if (!doc.type) {\n        doc.create('text');\n    }\n\n    var elem = document.getElementById('pad');\n    doc.attachTextarea(elem);\n});\n</code></pre>\n<p>See the full Gist: <a href=\"https://gist.github.com/NOtherDev/2ea2bb111c00282e7617\">ShareJS 0.7.3 client-side code</a>.</p>\n<p><em>This post is cross-posted with <a href=\"http://notherdev.blogspot.com/2014/10/sharejs-073-working-example.html\">my personal blog</a>.</em></p>","excerpt":"I’m experimenting with ShareJS library, which is intended to allow live concurrent editing like in Google Docs. The demo on their website…","frontmatter":{"slug":null,"title":"ShareJS 0.7.3 working example","description":null,"author":"adam","tags":["sharejs","nodejs","javascript"],"date":"2014-10-29T23:00:00.000Z","image":null},"timeToRead":3,"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-10-30-sharejs-073-working-example.md"},"site":{"siteMetadata":{"siteUrl":"https://brightinventions.pl"}}},"pageContext":{"fileAbsolutePath":"/home/runner/work/new-www/new-www/src/mdData/blog/2014-10-30-sharejs-073-working-example.md"}},"staticQueryHashes":["2189233960","3181594896"]}