{"version":3,"sources":["webpack://bright-website/./src/helpers/pathHelpers.ts","webpack://bright-website/./src/models/creator.ts","webpack://bright-website/./src/pages/career.tsx","webpack://bright-website/./src/pages/career/JobsOpenAll.tsx","webpack://bright-website/./src/pages/career/JobsOpenTop.tsx","webpack://bright-website/./src/styles/variables.ts"],"names":["getJobPath","path","split","pop","replace","getFileNameOnly","deleteTimestampFromUrl","createBlogPosts","data","allMarkdownRemark","edges","map","node","frontmatter","id","slug","fields","excerpt","createProjects","filter","project","published","sort","a","b","order","createJobs","fileAbsolutePath","url","className","title","pathOrigin","window","location","origin","src","alt","jobs","useStaticQuery","jobsQuery","job","key","href","hours","salary","JobsContainer","styled","variables","JobItem","JobSalary","JobHours","ApplyBtn","style","marginRight","routeLinks","pxToRem","px","deviceSize","pagePadding","size","mobile","tablet","navHeight","device","desktop","color","primary","text","white","black","font","family"],"mappings":"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","file":"component---src-pages-career-tsx-29232b911798f7d7af07.js","sourcesContent":["export const getUrlForAbsolutePath = (path: string) => {\n  return path.split(\"pages\").pop().replace(\".md\", \"\")\n}\n\nexport const getJobPath = (path: string) => {\n  return path.split('jobs').pop().replace('.md', '')\n}\n\nexport const getFileNameOnly = (path: string) => {\n  return path.split(\"/\").pop().replace(\".md\", \"\")\n}\n\nexport const deleteTimestampFromUrl = (path: string) => {\n  return path.replace(/([0-9]{4})-([0-9]{2})-([0-9]{2})-/, \"\")\n}\n","import { BlogPostModel, ProjectModel, GQLData, AuthorModel, JobModel } from \"./gql\"\n\nexport const createBlogPosts = (data: GQLData): BlogPostModel[] => (\n  (data.allMarkdownRemark.edges || []).map(({ node }) => ({\n    ...node.frontmatter,\n    id: node.id,\n    slug: node.fields.slug,\n    excerpt: node.excerpt\n  } as BlogPostModel))\n)\n\nexport const createProjects = (data: GQLData): ProjectModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter } }: { node: { frontmatter: ProjectModel } }) => frontmatter)\n    .filter((project: ProjectModel) => project.published)\n    .sort((a: ProjectModel, b: ProjectModel) => (a.order || 99) - (b.order || 99))\n)\n\nexport const createAuthors = (data: GQLData): AuthorModel[] => (\n  (data.allMarkdownRemark.nodes || [])\n    .map(({ frontmatter }: { frontmatter: AuthorModel }) => frontmatter)\n)\n\nexport const createJobs = (data: GQLData): JobModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter, fileAbsolutePath } }: { node: { frontmatter: JobModel, fileAbsolutePath: string } }) => ({...frontmatter, url: fileAbsolutePath}))\n)\n","// ---\n// layout: default\n// title: Career\n// class: career\n// ---\n\nimport React from 'react'\n\nimport {Page} from '../layout/Page'\nimport JobsOpenAll from './career/JobsOpenAll'\nimport JobsOpenTop from './career/JobsOpenTop'\nimport { HelmetTitleDescription } from '../meta/HelmetTitleDescription'\n\nconst CareerPage: React.FC = () => {\n  return (\n    <Page className=\"page-career\">\n      <HelmetTitleDescription title=\"Career\" />\n      <section className=\"hero is-dark we-hire\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">we hire bright people</h1>\n            <JobsOpenTop pathOrigin={typeof window !== \"undefined\" ? window.location.origin : ''} />\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container\">\n        <article className=\"section\">\n          <h2 className=\"title has-text-dark\">what we practice?</h2>\n          <div className=\"columns is-multiline\">\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/design.svg\" alt=\"in house design\" />\n              </figure>\n              <p>in house design</p>\n            </div>\n\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/code-review.svg\" alt=\"code review\" />\n              </figure>\n              <p>code review (Upsource)</p>\n            </div>\n\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/pairProgramming.svg\" alt=\"pair programming\" />\n              </figure>\n              <p>pair programming</p>\n            </div>\n\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/testdrivenenvironment.svg\" alt=\"TDD\" />\n              </figure>\n              <p>test driven development</p>\n            </div>\n\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/continuousintegration.svg\" alt=\"CI/CD\" />\n              </figure>\n              <p>continuous integration and delivery</p>\n            </div>\n\n            <div className=\"column is-one-third has-text-centered\">\n              <figure className=\"image is-128x128 is-inline-block\">\n                <img src=\"/images/oneOnOne.svg\" alt=\"one on one\" />\n              </figure>\n              <p>one on one meetings</p>\n            </div>\n          </div>\n        </article>\n      </div>\n\n      <section className=\"hero is-dark bright-minds\">\n        <div className=\"container has-text-centered is-flex has-items-centered\">\n          <h2 className=\"title\">bright minds, bright solutions</h2>\n        </div>\n      </section>\n\n      <div className=\"container\">\n        <article className=\"section\">\n          <h2 className=\"title\" id=\"open-positions\">\n            open positions\n          </h2>\n          <JobsOpenAll pathOrigin={typeof window !== \"undefined\" ? window.location.origin : ''} />\n        </article>\n      </div>\n    </Page>\n  )\n}\n\nexport default CareerPage\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\n\nimport { getJobPath } from '../../helpers/pathHelpers'\nimport { createJobs } from '../../models/creator'\n\nconst JobsOpenAll: React.FC<{ pathOrigin?: string }> = ({ pathOrigin = '' }) => {\n  const jobs = createJobs(useStaticQuery(jobsQuery))\n\n  return (\n    <div className='open-positions'>\n      {jobs.map(job => {\n        return (\n          <div className='open-position' key={job.title}>\n            <a\n              href={`${pathOrigin}/jobs${getJobPath(job.url)}`}\n              className='has-text-dark'\n            >\n              <div className='has-text-dark has-text-weight-bold is-size-3'>\n                {job.title}\n              </div>\n              <div className='has-text-grey'>{job.hours}</div>\n              <div className='has-text-primary'>{job.salary}</div>\n            </a>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default JobsOpenAll\n\nconst jobsQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { layout: { eq: \"job\" }, published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            salary\n            hours\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`\n","import { graphql, useStaticQuery } from 'gatsby'\nimport styled from 'styled-components'\nimport React from 'react'\n\nimport variables from '../../styles/variables'\nimport { getJobPath } from '../../helpers/pathHelpers'\nimport { routeLinks } from '../../config/routing'\nimport { createJobs } from '../../models/creator'\n\nconst JobsOpenTop: React.FC<{ pathOrigin?: string }> = ({ pathOrigin = '' }) => {\n  const jobs = createJobs(useStaticQuery(jobsQuery))\n\n  const JobsContainer = styled.div`\n    flex-wrap: wrap;\n    justify-content: flex-end;\n    \n    @media ${variables.device.mobile} {\n      && {\n        margin-top: 4rem;\n      }\n    }\n  `\n\n  const JobItem = styled.div`\n    padding: 0 1em;\n    flex-basis: 33%;\n    \n    @media ${variables.device.mobile} {\n      flex-basis: 100%;\n    }\n  `\n\n  const JobSalary = styled.div`\n    word-break: break-all;\n    max-width: 280px;\n  `\n\n  const JobHours = styled.div`\n    &:first-letter {\n      text-transform: capitalize;\n    }\n  `\n\n  const ApplyBtn = styled.a`\n    margin-top: 1rem;\n  `\n\n  return (\n    <JobsContainer className='is-flex is-flex-direction-row open-positions-top'>\n      {jobs.map(job => (\n        <JobItem className='level-item' key={job.title}>\n          <div>\n            <a href={`${pathOrigin}/jobs${getJobPath(job.url)}`}>\n              <h3 className='has-text-white has-text-weight-bold'>\n                {job.title}\n              </h3>\n              <JobHours className='has-text-grey-light'>\n                {job.hours}\n              </JobHours>\n              <JobSalary className='has-text-primary'>\n                {job.salary}\n              </JobSalary>\n            </a>\n            <ApplyBtn href='/apply-for-job' className='button is-primary is-small'>\n              Apply\n            </ApplyBtn>\n          </div>\n        </JobItem>\n      ))}\n      <div className='level-item' style={{ marginRight: '2rem' }}>\n        <div>\n          <a\n            href={`${routeLinks.career}#open-positions`}\n            className='has-text-weight-bold has-text-white'\n          >\n            <figure className='image is-24x24'>\n              <img src='/images/arrow-more.svg' alt='See all' />\n            </figure>\n            See all\n          </a>\n        </div>\n      </div>\n    </JobsContainer>\n  )\n}\n\nexport default JobsOpenTop\n\nconst jobsQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { layout: { eq: \"job\" }, published: { eq: true } }\n      }\n      limit: 3\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            salary\n            hours\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`","const basePx = 16\nexport const pxToRem = (px: number) => `${px / basePx}rem`\n\nconst deviceSize = {\n  mobile: 480,\n  tablet: 768\n}\n\nexport default {\n  pxToRem,\n\n  pagePadding: pxToRem(40),\n\n  size: {\n    mobile: `${deviceSize.mobile}px`,\n    tablet: `${deviceSize.tablet}px`,\n    navHeight: '4.6rem'\n  },\n\n  device: {\n    mobile: `screen and (max-width: ${deviceSize.tablet -1}px)`,\n    desktop: `min-width: ${deviceSize.tablet}`,\n  },\n\n  color: {\n    primary: '#f7931e', //brightOrange\n    text: '#131214',\n    white: '#ffffff',\n    black: '#000000'\n  },\n\n  font: {\n    title: {\n      family: 'Montserrat, sans-serif',\n      size: pxToRem(22)\n    },\n    text: {\n      family: 'Lato, sans-serif',\n      size: pxToRem(18)\n    }\n  },\n}\n"],"sourceRoot":""}