{"version":3,"sources":["webpack://bright-website/./src/helpers/pathHelpers.ts","webpack://bright-website/./src/models/creator.ts","webpack://bright-website/./src/pages/career/JobsOpenAll.tsx"],"names":["getJobPath","path","split","pop","replace","getFileNameOnly","deleteTimestampFromUrl","createBlogPosts","data","allMarkdownRemark","edges","map","node","frontmatter","id","slug","fields","excerpt","createProjects","filter","project","published","sort","a","b","order","createJobs","fileAbsolutePath","url","pathOrigin","jobs","useStaticQuery","jobsQuery","className","job","key","title","href","hours","salary"],"mappings":"sMAAO,IAIMA,EAAa,SAACC,GACzB,OAAOA,EAAKC,MAAM,QAAQC,MAAMC,QAAQ,MAAO,KAGpCC,EAAkB,SAACJ,GAC9B,OAAOA,EAAKC,MAAM,KAAKC,MAAMC,QAAQ,MAAO,KAGjCE,EAAyB,SAACL,GACrC,OAAOA,EAAKG,QAAQ,oCAAqC,M,mHCXpD,IAAMG,EAAkB,SAACC,GAAD,OAC5BA,EAAKC,kBAAkBC,OAAS,IAAIC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,wBACpCA,EAAKC,YAD+B,CAEvCC,GAAIF,EAAKE,GACTC,KAAMH,EAAKI,OAAOD,KAClBE,QAASL,EAAKK,cAILC,EAAiB,SAACV,GAAD,OAC3BA,EAAKC,kBAAkBC,OAAS,IAC9BC,KAAI,qBAAGC,KAAQC,eACfM,QAAO,SAACC,GAAD,OAA2BA,EAAQC,aAC1CC,MAAK,SAACC,EAAiBC,GAAlB,OAAuCD,EAAEE,OAAS,KAAOD,EAAEC,OAAS,QAQjEC,EAAa,SAAClB,GAAD,OACvBA,EAAKC,kBAAkBC,OAAS,IAC9BC,KAAI,oBAAGC,KAAQC,EAAX,EAAWA,YAAac,EAAxB,EAAwBA,iBAAxB,wBAAqHd,EAArH,CAAkIe,IAAKD,S,qFCMhJ,UAzBuD,SAAC,GAAyB,IAAD,IAAtBE,kBAAsB,MAAT,GAAS,EACxEC,GAAOJ,SAAWK,oBAAeC,IAEvC,OACE,uBAAKC,UAAU,kBACZH,EAAKnB,KAAI,SAAAuB,GACR,OACE,uBAAKD,UAAU,gBAAgBE,IAAKD,EAAIE,OACtC,qBACEC,KAASR,EAAL,SAAuB7B,QAAWkC,EAAIN,KAC1CK,UAAU,iBAEV,uBAAKA,UAAU,gDACZC,EAAIE,OAEP,uBAAKH,UAAU,iBAAiBC,EAAII,OACpC,uBAAKL,UAAU,oBAAoBC,EAAIK,eAWrD,IAAMP,EAAS","file":"component---src-pages-career-jobs-open-all-tsx-6b471e33ccf5bdc05ba3.js","sourcesContent":["export const getUrlForAbsolutePath = (path: string) => {\n  return path.split(\"pages\").pop().replace(\".md\", \"\")\n}\n\nexport const getJobPath = (path: string) => {\n  return path.split('jobs').pop().replace('.md', '')\n}\n\nexport const getFileNameOnly = (path: string) => {\n  return path.split(\"/\").pop().replace(\".md\", \"\")\n}\n\nexport const deleteTimestampFromUrl = (path: string) => {\n  return path.replace(/([0-9]{4})-([0-9]{2})-([0-9]{2})-/, \"\")\n}\n","import { BlogPostModel, ProjectModel, GQLData, AuthorModel, JobModel } from \"./gql\"\n\nexport const createBlogPosts = (data: GQLData): BlogPostModel[] => (\n  (data.allMarkdownRemark.edges || []).map(({ node }) => ({\n    ...node.frontmatter,\n    id: node.id,\n    slug: node.fields.slug,\n    excerpt: node.excerpt\n  } as BlogPostModel))\n)\n\nexport const createProjects = (data: GQLData): ProjectModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter } }: { node: { frontmatter: ProjectModel } }) => frontmatter)\n    .filter((project: ProjectModel) => project.published)\n    .sort((a: ProjectModel, b: ProjectModel) => (a.order || 99) - (b.order || 99))\n)\n\nexport const createAuthors = (data: GQLData): AuthorModel[] => (\n  (data.allMarkdownRemark.nodes || [])\n    .map(({ frontmatter }: { frontmatter: AuthorModel }) => frontmatter)\n)\n\nexport const createJobs = (data: GQLData): JobModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter, fileAbsolutePath } }: { node: { frontmatter: JobModel, fileAbsolutePath: string } }) => ({...frontmatter, url: fileAbsolutePath}))\n)\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\n\nimport { getJobPath } from '../../helpers/pathHelpers'\nimport { createJobs } from '../../models/creator'\n\nconst JobsOpenAll: React.FC<{ pathOrigin?: string }> = ({ pathOrigin = '' }) => {\n  const jobs = createJobs(useStaticQuery(jobsQuery))\n\n  return (\n    <div className='open-positions'>\n      {jobs.map(job => {\n        return (\n          <div className='open-position' key={job.title}>\n            <a\n              href={`${pathOrigin}/jobs${getJobPath(job.url)}`}\n              className='has-text-dark'\n            >\n              <div className='has-text-dark has-text-weight-bold is-size-3'>\n                {job.title}\n              </div>\n              <div className='has-text-grey'>{job.hours}</div>\n              <div className='has-text-primary'>{job.salary}</div>\n            </a>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default JobsOpenAll\n\nconst jobsQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { layout: { eq: \"job\" }, published: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            salary\n            hours\n          }\n          fileAbsolutePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}