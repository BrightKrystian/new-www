{"version":3,"sources":["webpack://bright-website/./src/components/shared/index.styled.ts","webpack://bright-website/./src/components/shared/index.tsx","webpack://bright-website/./src/models/creator.ts","webpack://bright-website/./src/components/subcomponents/ProjectCard.module.scss","webpack://bright-website/./src/components/subcomponents/ProjectCard.tsx","webpack://bright-website/./src/pages/projects.module.scss","webpack://bright-website/./src/pages/projects.tsx","webpack://bright-website/./src/styles/variables.ts"],"names":["HideTablet","styled","display","HideDesktop","Section","variables","SectionBlack","TitleBase","SectionTitle","TextTitle","TextRegular","PageDescription","justifyContent","width","paddingTop","paddingBottom","margin","textAlign","maxWidth","color","padding","Button","MoreButton","href","text","disabled","isSubmit","children","Btn","type","className","Link","to","Styled","createBlogPosts","data","allMarkdownRemark","edges","map","node","frontmatter","id","slug","fields","excerpt","createProjects","filter","project","published","sort","a","b","order","createJobs","fileAbsolutePath","url","imageWrap","invertTitle","Title","classNames","title","Image","styles","G","imgStyle","objectFit","image","getImage","alt","routeLinks","projects","allTags","forEach","tags","tag","includes","push","useState","selectedTags","setSelectedTags","Page","HelmetTitleDescription","description","length","onClick","key","selectedTag","selectTag","every","pxToRem","px","deviceSize","pagePadding","size","mobile","tablet","navHeight","device","desktop","primary","white","black","font","family"],"mappings":"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","file":"component---src-pages-projects-tsx-aca2e8a029bec1e2e0de.js","sourcesContent":["import styled from \"styled-components\"\nimport variables from \"../../styles/variables\"\n\nexport const HideTablet = styled.div({\n  [\"@media screen and (max-width: 767px)\"]: {\n    display: \"none\",\n  },\n})\n\nexport const HideDesktop = styled.div({\n  [\"@media screen and (min-width: 768px)\"]: {\n    display: \"none\",\n  },\n})\n\nexport const Section = styled.section`\n  padding: 6rem 2rem;\n  color: ${variables.color.text};\n  @media ${variables.device.mobile} {\n    padding: 2rem 0.5rem 1rem;\n  }\n`\n\nexport const SectionBlack = styled(Section)`\n  background-color: ${variables.color.text};\n  color: ${variables.color.white};\n`\n\nexport const TitleBase = `\n  font-family: \"Montserrat\", sans-serif;\n  font-style: normal;\n  font-weight: bold;\n  letter-spacing: 0;\n  text-align: center;\n`\n\nexport const SectionTitle = styled.h3`\n  ${TitleBase};\n  font-size: 2rem;\n  margin: 1em 0 3rem;\n`\n\nexport const TextTitle = styled.div`\n  ${TitleBase};\n  margin: 1em 0;\n  font-size: 1.2rem;\n`\n\nexport const TextRegular = styled.div`\n  font-family: ${variables.font.text.family};\n  font-size: ${variables.font.text.size};\n  line-height: 2rem;\n`\n\nexport const PageDescription = styled(TextRegular)({\n  display: \"flex\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  paddingTop: \"30px\",\n  paddingBottom: \"10px\",\n  margin: \"0 auto 2rem\",\n\n  textAlign: \"left\",\n  maxWidth: \"955px\",\n  color: variables.color.text,\n  padding: \"10px\",\n})\n\nexport const Button = styled.div`\n  & button {\n    border: 1px solid black;\n    background: white;\n    font-family: \"Montserrat\", sans-serif;\n    font-style: normal;\n    font-weight: bold;\n    letter-spacing: 0;\n    color: #000000;\n    opacity: 1;\n    padding: 0.5rem 2.2rem;\n    font-size: 1rem;\n    cursor: pointer;\n    margin-top: 3rem;\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport * as Styled from './index.styled'\n\ninterface MoreButtonProps {\n  href?: string\n  text?: string\n  isSubmit?: boolean\n  disabled?: boolean\n}\n\nexport const MoreButton: React.FC<MoreButtonProps> = ({ href, text, disabled, isSubmit, children }) => {\n  const Btn = () => <button type={isSubmit ? 'submit' : 'button'} disabled={disabled}>{text || children}</button>\n  return (\n    <Styled.Button className={'column is-full has-text-centered'}>\n      {href\n        ? <Link to={href}><Btn/></Link>\n        : <Btn/>\n      }\n    </Styled.Button>\n  )\n}\n\nexport const HideTablet = Styled.HideTablet\nexport const HideDesktop = Styled.HideDesktop\nexport const PageDescription = Styled.PageDescription\nexport const Section = Styled.Section\nexport const SectionBlack = Styled.SectionBlack\nexport const SectionTitle = Styled.SectionTitle\nexport const TextTitle = Styled.TextTitle\nexport const TextRegular = Styled.TextRegular\n","import { BlogPostModel, ProjectModel, GQLData, AuthorModel, JobModel } from \"./gql\"\n\nexport const createBlogPosts = (data: GQLData): BlogPostModel[] => (\n  (data.allMarkdownRemark.edges || []).map(({ node }) => ({\n    ...node.frontmatter,\n    id: node.id,\n    slug: node.fields.slug,\n    excerpt: node.excerpt\n  } as BlogPostModel))\n)\n\nexport const createProjects = (data: GQLData): ProjectModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter } }: { node: { frontmatter: ProjectModel } }) => frontmatter)\n    .filter((project: ProjectModel) => project.published)\n    .sort((a: ProjectModel, b: ProjectModel) => (a.order || 99) - (b.order || 99))\n)\n\nexport const createAuthors = (data: GQLData): AuthorModel[] => (\n  (data.allMarkdownRemark.nodes || [])\n    .map(({ frontmatter }: { frontmatter: AuthorModel }) => frontmatter)\n)\n\nexport const createJobs = (data: GQLData): JobModel[] => (\n  (data.allMarkdownRemark.edges || [])\n    .map(({ node: { frontmatter, fileAbsolutePath } }: { node: { frontmatter: JobModel, fileAbsolutePath: string } }) => ({...frontmatter, url: fileAbsolutePath}))\n)\n","// extracted by mini-css-extract-plugin\nexport const container = \"ProjectCard-module--container--2JqE-\";\nexport const imageWrap = \"ProjectCard-module--imageWrap--1bTt3\";\nexport const title = \"ProjectCard-module--title--WktQ6\";","import React from 'react'\nimport classNames from 'classnames'\n\nimport {ProjectModel} from '../../models/gql'\nimport {routeLinks} from '../../config/routing'\n\nimport * as styles from './ProjectCard.module.scss'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\n\ninterface ProjectCardProps {\n    project: ProjectModel\n    invertTitle?: boolean\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = ({project, invertTitle}) => {\n    const Title = () => (\n        <span className={classNames('is-size-5 has-text-black has-text-weight-bold', styles.title)}>\n            {project.title}\n        </span>\n    )\n\n    const Image = () => {\n        return (\n          <figure className={classNames('image is-inline-block', styles.imageWrap)}>\n              <GatsbyImage className={styles.imageWrap} imgStyle={{objectFit: 'contain'}} image={getImage(project.image)!} alt={project.title} />\n          </figure>\n        )\n    }\n\n    return (\n        <a className={classNames('card-content', styles.container)} href={`${routeLinks.projects}/${project.slug}`}>\n            {invertTitle\n                ? (\n                    <React.Fragment>\n                        <Image />\n                        <Title />\n                    </React.Fragment>\n                )\n                : (\n                    <React.Fragment>\n                        <Title />\n                        <Image />\n                    </React.Fragment>\n                )\n            }\n        </a>\n    )\n}\n\nexport default ProjectCard\n","// extracted by mini-css-extract-plugin\nexport const info = \"projects-module--info--1StSG\";\nexport const filter = \"projects-module--filter--10rMt\";\nexport const project = \"projects-module--project--3WIR1\";","import {graphql} from 'gatsby'\nimport React, {useState} from 'react'\nimport classNames from 'classnames'\n\nimport {Page} from '../layout/Page'\nimport ProjectCard from '../components/subcomponents/ProjectCard'\nimport {Section, PageDescription} from '../components/shared'\nimport {createProjects} from '../models/creator'\nimport {GQLData} from '../models/gql'\n\nimport * as styles from './projects.module.scss'\nimport { HelmetTitleDescription } from '../meta/HelmetTitleDescription'\n\nconst ProjectsPage: React.FC<{data: GQLData}> = ({data}) => {\n  const projects = createProjects(data)\n\n  const allTags: string[] = []\n  projects.forEach(project => (project.tags || []).forEach(tag => {\n    if (!allTags.includes(tag)) {\n      allTags.push(tag)\n    }\n  }))\n\n  const [selectedTags, setSelectedTags] = useState<string[]>([])\n\n  const selectTag = (tag: string) => {\n    if (selectedTags.includes(tag)) {\n      setSelectedTags(selectedTags.filter(selectedTag => selectedTag !== tag))\n    } else {\n      setSelectedTags([...selectedTags, tag])\n    }\n  }\n\n  return (\n    <Page>\n      <HelmetTitleDescription\n        title='Projects'\n        description='About our software development projects'\n      />\n      <div className='container'>\n        <Section className={styles.info}>\n          <PageDescription>\n            Since 2012 we have realized many innovative projects among which\n            there are solutions supporting eco-driving, application for\n            sportsmen, POS cash register, system supporting answering calls to\n            emergency numbers and many others.\n          </PageDescription>\n          <div className='buttons'>\n            {allTags.length > 0 && (\n                <div className={classNames('button', styles.filter, {['is-black']: selectedTags.length === 0})}\n                     onClick={() => setSelectedTags([])}>\n                  all\n                </div>\n            )}\n            {allTags.map(tag => (\n                <div key={tag}\n                     className={classNames('button',  styles.filter, {['is-black']: selectedTags.includes(tag)})}\n                     onClick={() => selectTag(tag)}>\n                  {tag}\n                </div>\n            ))}\n          </div>\n        </Section>\n        <Section>\n          <div className='columns is-multiline'>\n            {projects\n                .filter((project) =>\n                    selectedTags.length === 0 ||\n                    (project.tags && selectedTags.every(tag => project.tags.includes(tag)))\n                )\n                .map((project) => (\n                  <div className={classNames('column', styles.project)} key={project.title}>\n                      <ProjectCard project={project} />\n                  </div>\n                ))\n            }\n          </div>\n        </Section>\n      </div>\n    </Page>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(filter: { frontmatter: { layout: { eq: \"project\" } } }) {\n      edges {\n        node {\n          frontmatter {\n            title\n            image {\n                childImageSharp {\n                    gatsbyImageData(\n                        height: 900,\n                        layout: CONSTRAINED\n                    )\n                }\n            }\n            layout\n            published\n            tags\n            slug\n            order\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default ProjectsPage\n","const basePx = 16\nexport const pxToRem = (px: number) => `${px / basePx}rem`\n\nconst deviceSize = {\n  mobile: 480,\n  tablet: 768\n}\n\nexport default {\n  pxToRem,\n\n  pagePadding: pxToRem(40),\n\n  size: {\n    mobile: `${deviceSize.mobile}px`,\n    tablet: `${deviceSize.tablet}px`,\n    navHeight: '4.6rem'\n  },\n\n  device: {\n    mobile: `screen and (max-width: ${deviceSize.tablet -1}px)`,\n    desktop: `min-width: ${deviceSize.tablet}`,\n  },\n\n  color: {\n    primary: '#f7931e', //brightOrange\n    text: '#131214',\n    white: '#ffffff',\n    black: '#000000'\n  },\n\n  font: {\n    title: {\n      family: 'Montserrat, sans-serif',\n      size: pxToRem(22)\n    },\n    text: {\n      family: 'Lato, sans-serif',\n      size: pxToRem(18)\n    }\n  },\n}\n"],"sourceRoot":""}